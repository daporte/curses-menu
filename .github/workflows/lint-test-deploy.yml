on: [ push, pull_request ]

name: Tests

env:
  PYTHONWARNINGS: all
  TERM: xterm-256color

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  black-format:
    name: Check format with black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
  flake8-lint:
    runs-on: ubuntu-latest
    name: Lint with flake8
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: py-actions/flake8@v2
  ruff-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: ruff .
  mypy:
    name: Type check with mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run mypy .

  test:
    name: Tests

    strategy:
      matrix:
        python-version: [ "3.10", "3.9","3.8", "3.7", "3.11", "pypy3.9" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: windows-latest
            python-version: pypy3
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
      - run: poetry run coverage lcov
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true
  coveralls:
    name: Upload data to coveralls
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel-finished: true

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Final Test Results
    needs: [ test ]
    steps:
      - run: |
          result="${{ needs.test.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi



  build-and-publish:
    name: Build and publish Python distributions to PyPI and TestPyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - pre-commit
      - black-format
      - flake8-lint
      - mypy
      - test
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - name: Build and publish to pypi
        uses: JRubics/poetry-publish@v1.15
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}
